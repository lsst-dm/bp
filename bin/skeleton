#!/usr/bin/env python
import argparse
import os

def main():
    inputRoot = os.path.abspath(os.path.join(os.path.dirname(__file__), "..", "skeleton"))

    parser = argparse.ArgumentParser(description="Generate a skeleton tree for a typical LSST package.")
    parser.add_argument("--output", "-o", default=None, action="store", metavar="DIR", dest="output",
                        help="directory in which to build skeleton tree")
    parser.add_argument("product", nargs=1, metavar="PRODUCT",
                        help="product name (with '_' separators)")
    parser.add_argument("--clobber", default=False, action="store_true", dest="clobber",
                        help="clobber existing files with the same name")
    parser.add_argument("--dry-run", default=False, action="store_true", dest="dryrun",
                        help="just print actions instead of actually carrying them out")
    args = parser.parse_args()

    product = args.product[0]

    variables = {"PRODUCT": product}
    
    if args.output is None:
        outputRoot = os.path.abspath(product)
    else:
        outputRoot = os.path.abspath(args.output)

    if not os.path.exists(outputRoot):
        print "mkdir -p {0}".format(outputRoot)
        if not args.dryrun:
            os.makedirs(outputRoot)
    os.chdir(inputRoot)

    for dirPath, inputDirNames, inputFileNames in os.walk("."):
        if ".svn" in inputDirNames:
            inputDirNames.remove(".svn")
        for inputDirName in inputDirNames:
            outputDirName = os.path.normpath(os.path.join(outputRoot, dirPath, inputDirName))
            if not os.path.exists(outputDirName):
                print "mkdir {0}".format(outputDirName)
                if not args.dryrun:
                    os.mkdir(outputDirName)
        for inputFileName in inputFileNames:
            if inputFileName.endswith("~") or inputFileName.endswith(".pyc"):
                continue
            outputFileName = os.path.normpath(
                os.path.join(outputRoot, dirPath, inputFileName % variables)
                )
            if os.path.exists(outputFileName) and not args.clobber:
                outputFileName = outputFileName + ".sk"
            print "Writing {0}".format(outputFileName)
            if not args.dryrun:
                inputFile = open(os.path.join(dirPath, inputFileName), "r")
                outputFile = open(outputFileName, "w")
                outputFile.write(inputFile.read() % variables)
                inputFile.close()
                outputFile.close()

    outputPath = os.path.join(outputRoot, "python", "lsst")
    inputFileName = os.path.join("python", "lsst", "__init__.py")
    parts = product.split("_")
    for part in parts[:-1]:
        outputPath = os.path.join(outputPath, part)
        if not os.path.exists(outputPath):
            print "mkdir {0}".format(outputPath)
            if not args.dryrun:
                os.mkdir(outputPath)
        outputFileName = os.path.join(outputPath, "__init__.py")
        if os.path.exists(outputFileName) and not args.clobber:
            outputFileName = outputFileName + ".sk"
        print "Writing {0}".format(outputFileName)
        if not args.dryrun:
            inputFile = open(inputFileName, "r")
            outputFile = open(outputFileName, "w")
            outputFile.write(inputFile.read() % variables)
            inputFile.close()
            outputFile.close()
    outputPath = os.path.join(outputPath, parts[-1])
    if not os.path.exists(outputPath):
        print "mkdir {0}".format(outputPath)
        if not args.dryrun:
            os.mkdir(outputPath)
            

if __name__ == "__main__":
    main()
