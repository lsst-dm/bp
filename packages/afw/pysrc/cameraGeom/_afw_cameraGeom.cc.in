#include "lsst/bputils.h"
#include "lsst/bputils/containers.h"
#include "lsst/bputils/pickle.h"
#include "lsst/afw/cameraGeom/Id.h"
#include "lsst/afw/cameraGeom/Orientation.h"
#include "lsst/afw/cameraGeom/Detector.h"
#include "lsst/afw/cameraGeom/Amp.h"
#include "lsst/afw/cameraGeom/DetectorMosaic.h"
#include "lsst/afw/cameraGeom/Ccd.h"
#include "lsst/afw/cameraGeom/Raft.h"
#include "lsst/afw/cameraGeom/Camera.h"
#include "lsst/afw/image/Image.h"
#include "lsst/afw/image/Mask.h"

#include "boost/python/extensions/ndarray.hpp"

namespace bp = boost::python;
namespace bpx = boost::python::extensions;

@Customize {}

@Namespace(lsst::afw::cameraGeom) {

    @Class(Id) {};

    @Class(Orientation) {};

    @Class(Detector, bases={lsst::daf::base::Citizen}) {
        @Customize {
            bputils::PyContainer< std::vector< image::DefectBase::Ptr > >::declare("DefectList");
            wrapper.def(bp::self == bp::self);
            wrapper.def(bp::self < bp::self);
            wrapper.@Member(getAllPixels, policies={bpx::return_internal<>()});
            wrapper.@Member(getOrientation, policies={bpx::return_internal<>()});
            wrapper.@Member(getDefects[const], policies={bp::return_value_policy<bpx::copy_to_tuple>()});
            wrapper.@Member(getDefects[nonconst], policies={bpx::return_internal<>()});
        }
    };

    @Class(ElectronicParams) {};

    @Class(Amp) {
        template <typename ImageT, typename Wrapper>
        static void declareTemplates(Wrapper & wrapper) {
            wrapper.def(
                "prepareAmpData", &Amp::prepareAmpData<ImageT>, bp::arg("im"),
                @Doc(prepareAmpData)
            );
        }
        @Customize {
            wrapper.@Member(getDataSec[nonconst], policies={bpx::return_internal<>()});
            declareTemplates< image::Image<boost::uint16_t> >(wrapper);
            declareTemplates< image::Image<int> >(wrapper);
            declareTemplates< image::Image<float> >(wrapper);
            declareTemplates< image::Image<double> >(wrapper);
            declareTemplates< image::Mask<boost::uint16_t> >(wrapper);
        }
    };

    @Class(DetectorMosaic, exclude_list=[begin,end]) {
        @Customize {
            wrapper.main_class().def(
                "__iter__", bp::iterator< DetectorMosaic, bp::return_value_policy<bp::return_by_value> >()
            );
        }
    };

    @Class(Ccd, exclude_list=[begin, end]) {
        @Customize {
            wrapper.main_class().def(
                "__iter__", bp::iterator< Ccd, bp::return_value_policy<bp::return_by_value> >()
            );
        }
    };

    @Class(Raft) {};

    @Class(Camera) {};

    void declare() {
        PyId::declare();
        PyOrientation::declare();
        PyDetector::declare();
        PyElectronicParams::declare();
        PyAmp::declare();
        PyDetectorMosaic::declare();
        PyCcd::declare();
        PyRaft::declare();
        PyCamera::declare();
    }

}

BOOST_PYTHON_MODULE(_afw_cameraGeom) {
    bpx::numpy::initialize();
    bp::import("lsst.afw.image");
    lsst::afw::cameraGeom::declare();
}
