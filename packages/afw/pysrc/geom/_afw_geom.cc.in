#include "lsst/bputils.h"
#include "lsst/afw/geom.h"
#include "lsst/afw/geom/Angle.h"
#include <boost/python/eigen.hpp>
#include <boost/python/slice.hpp>

namespace bp = boost::python;

@Customize {}

@Namespace(lsst::afw::geom) {

    template <typename T, int N, typename U>
        static U Py_getitem(T const & self, int index) {
        if (index < 0 || index >= N) {
            PyErr_SetString(PyExc_IndexError, "Index out of range.");
            boost::python::throw_error_already_set();
        }
        return self[index];
    }

    template <typename T, int N, typename U>
        static void Py_setitem(T & self, int index, U value) {
        if (index < 0 || index >= N) {
            PyErr_SetString(PyExc_IndexError, "Index out of range.");
            boost::python::throw_error_already_set();
        }
        self[index] = value;
    }

    template <typename T, int N> static int Py_len(T const & self) { return N; }

    // CoordinateBase isn't wrapped as a Python class - we just inject its members into derived classes.
    struct PyCoordinateBase {

        template <typename Derived, typename Wrapper>
        static void declare(Wrapper & wrapper) {
            wrapper
                .def("__getitem__", &Py_getitem< Derived, Derived::dimensions, typename Derived::Element >)
                .def("__setitem__", &Py_setitem< Derived, Derived::dimensions, typename Derived::Element >)
                .def("__len__", &Py_len< Derived, Derived::dimensions >)
                ;
            wrapper.def(str(bp::self));
            declareAccessors<Derived>(wrapper, (boost::mpl::int_<Derived::dimensions>*)0);
        }

        template <typename Derived, typename Wrapper>
        static void declareAccessors(Wrapper & wrapper, boost::mpl::int_<2> *) {
            wrapper
                .def("getX", &Derived::getX)
                .def("getY", &Derived::getY)
                .def("setX", &Derived::setX)
                .def("setY", &Derived::setY)
                .add_property("x", &Derived::getX, &Derived::setX)
                .add_property("y", &Derived::getY, &Derived::setY)
                ;
        }

        template <typename Derived, typename Wrapper>
        static void declareAccessors(Wrapper & wrapper, boost::mpl::int_<3> *) {
            declareAccessors<Derived>(wrapper, (boost::mpl::int_<2>*)0);
            wrapper
                .def("getZ", &Derived::getZ)
                .def("setZ", &Derived::setZ)
                .add_property("z", &Derived::getZ, &Derived::setZ)
                ;
        }

        template <typename T, typename Wrapper>
        static void declareConstructor(Wrapper & wrapper, boost::mpl::int_<2> *) {
            wrapper.def(bp::init<T,T>((bp::arg("x"), bp::arg("y"))));
        }

        template <typename T, typename Wrapper>
        static void declareConstructor(Wrapper & wrapper, boost::mpl::int_<3> *) {
            wrapper.def(bp::init<T,T,T>((bp::arg("x"), bp::arg("y"), bp::arg("z"))));
        }

    };

    template <int N>
    @TemplateClass(CoordinateExpr, tparams={<N>}, bases={}) {
        @Customize {
            PyCoordinateBase::declare< CoordinateExpr<N> >(wrapper);
        }
    };
    
    template <typename T, int N>
    @TemplateClass(Extent, tparams={<T,N>}, bases={}, exclude_list=[Extent, EigenVector]) {
        @Customize {
            wrapper
                .def(
                    bp::init<T>(
                        (bp::arg("val")=static_cast<T>(0)),
                        @Doc(Extent[scalar])
                    )
                )
                .def(bp::init< Point<T,N> const & >(bp::arg("other")))
                .def(bp::self + bp::other< Point<T,N> >())
                .def(bp::self + bp::self)
                .def(bp::self - bp::self)
                .def(bp::self += bp::self)
                .def(bp::self -= bp::self)
                .def(+bp::self)
                .def(-bp::self)
                .def(bp::self * bp::other<T>())
                .def(bp::self *= bp::other<T>())
                .def(bp::self / bp::other<T>())
                .def(bp::self /= bp::other<T>())
                .def(bp::self == bp::self)
                .def(bp::self != bp::self)
                ;
            PyCoordinateBase::declare< Extent<T,N> >(wrapper);
            PyCoordinateBase::declareConstructor<T>(wrapper, (boost::mpl::int_<N>*)0);
        }
    };

    template <typename T, int N>
    @TemplateClass(Point, tparams={<T,N>}, bases={}, exclude_list=[Point, EigenVector]) {
        @Customize {
            wrapper
                .def(
                    bp::init<T>(
                        (bp::arg("val")=static_cast<T>(0)),
                        @Doc(Point[scalar])
                    )
                )
                .def(bp::init< Extent<T,N> const & >(bp::arg("other")))
                .def(bp::init< Point<int,N> const & >(bp::arg("other")))
                .def(bp::init< Point<double,N> const & >(bp::arg("other")))
                .def(bp::self - bp::self)
                .def(bp::self + bp::other< Extent<T,N> >())
                .def(bp::self - bp::other< Extent<T,N> >())
                .def(bp::self += bp::other< Extent<T,N> >())
                .def(bp::self -= bp::other< Extent<T,N> >())
                .def(bp::self == bp::self)
                .def(bp::self != bp::self)
                ;
            PyCoordinateBase::declare< Point<T,N> >(wrapper);
            PyCoordinateBase::declareConstructor<T>(wrapper, (boost::mpl::int_<N>*)0);
        }
    };

    @Class(LinearTransform) {
        @Customize {
            wrapper
                .def(bp::self * bp::self)
                .def(str(bp::self))
                .@Member(getMatrix, policies={bp::return_internal_matrix<>()})
                .@Member(getParameterVector, policies={bp::squeeze_matrix<>()})
                .def("__getitem__", &Py_getitem<LinearTransform,4,double>)
                .def("__setitem__", &Py_setitem<LinearTransform,4,double>)
                .def("__len__", &Py_len<LinearTransform,4>)
            ;
        }
    };

    @Class(AffineTransform) {
        @Customize {
            wrapper
                .def(bp::self * bp::self)
                .def(str(bp::self))
                .@Member(getParameterVector, policies={bp::squeeze_matrix<>()})
                .@Member(getTranslation, policies={bp::const_aware::return_internal<>()})
                .@Member(getLinear, policies={bp::const_aware::return_internal<>()})
                .def("__getitem__", &Py_getitem<AffineTransform,4,double>)
                .def("__setitem__", &Py_setitem<AffineTransform,4,double>)
                .def("__len__", &Py_len<AffineTransform,4>)
                ;
        }
    };

    @Class(Box2I) {
        static Box2I::EdgeHandlingEnum const EXPAND = Box2I::EXPAND;
        static bp::object getSlices(Box2I const & self) {
            return bp::make_tuple(
                bp::slice(self.getBeginY(), self.getEndY()), 
                bp::slice(self.getBeginX(), self.getEndX())
            );
        }
        @Customize {
            wrapper
                .def(bp::self == bp::self)
                .def(bp::self != bp::self)
                .def(str(bp::self))
                .@MemberList(
                    [getMin, getBegin, getDimensions], 
                    policies={bp::return_value_policy< bp::copy_const_reference >()}
                )
                .@Member(getSlices, pointer={getSlices})
                ;
        }
    };
    Box2I::EdgeHandlingEnum const PyBox2I::EXPAND;

    @Class(Box2D) {
        @Customize {
            wrapper
                .def(bp::self == bp::self)
                .def(bp::self != bp::self)
                .def(str(bp::self))
                .@MemberList(
                    [getMin, getMax], policies={bp::return_value_policy< bp::copy_const_reference >()}
                )
                ;
        }
    };
    
    struct PyAngleUnit {
        static void declare() {
            bp::class_<AngleUnit>("AngleUnit", bp::no_init)
                .def(double() * bp::self)
                .def(int() * bp::self)
                ;
            bp::object module = bp::scope();
            module.attr("radians") = radians;
            module.attr("degrees") = degrees;
            module.attr("arcminutes") = arcminutes;
            module.attr("arcseconds") = arcseconds;
        }
    };

    @Class(Angle) {
        @Customize {
            wrapper
                .def(float_(bp::self))
                .def(bp::self + bp::self)
                .def(bp::self - bp::self)
                .def(bp::self * bp::self)
                .def(bp::self * double())
                .def(bp::self * int())
                .def(double() * bp::self)
                .def(int() * bp::self)
                .def(bp::self / double())
                .def(bp::self / int())
                .def(str(bp::self))
                ;
        }
    };

    template <typename T, int N>
    void instantiateTN(std::string const & t, std::string const & n) {
        PyExtent<T,N>::declare(("Extent" + n + t).c_str());
        PyPoint<T,N>::declare(("Point" + n + t).c_str());
    }

    template <int N>
    void instantiateN(std::string const & n) {
        PyCoordinateExpr<N>::declare(("CoordinateExpr" + n).c_str());
        instantiateTN<double,N>("D", n);
        instantiateTN<int,N>("I", n);
    }

    void declare() {
        bputils::declareException<SingularTransformException,pex::exceptions::RuntimeErrorException>(
            "SingularTransformException"
        );
        instantiateN<2>("2");
        instantiateN<3>("3");
        PyLinearTransform::declare();
        PyAffineTransform::declare();
        PyBox2I::declare();
        PyBox2D::declare();
        PyAngleUnit::declare();
        PyAngle::declare();
    }

}

BOOST_PYTHON_MODULE(_afw_geom) {
    lsst::bputils::registerConversions();
    bp::numpy::initialize();
    lsst::afw::geom::declare();
}
