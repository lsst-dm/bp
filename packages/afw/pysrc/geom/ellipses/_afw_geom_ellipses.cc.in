#include "lsst/bputils.h"
#include "lsst/afw/geom/ellipses.h"
#include "boost/python/extensions/eigen.hpp"

namespace bp = boost::python;
namespace bpx = boost::python::extensions;

@Customize {}

@Namespace(lsst::afw::geom::ellipses) {

    // Call policies to be used when wrapping transform and convolve methods of Ellipse and BaseCore;
    // These methods return expression objects that contain references to the ellipse/core and the argument,
    // and these policies ensure those stay around as long as the expression object does.
    typedef bp::with_custodian_and_ward_postcall< 
    0, 1, 
        bp::with_custodian_and_ward_postcall< 0 , 2 > 
        > HelperPolicies;
    typedef bpx::as_const<HelperPolicies> ConstHelperPolicies;

    @Class(
        BaseCore,
        noncopyable=True,
        exclude_list=[as, readParameters, writeParameters]
    ) {

        static LinearTransform getGridTransform(BaseCore const & self) {
            return self.getGridTransform();
        }
        
        @Customize {
            bp::class_< bpx::const_aware<BaseCore::Transformer> >("Transformer", bp::no_init)
                .def("copy", &BaseCore::Transformer::copy)
                .def("inPlace", &BaseCore::Transformer::inPlace)
                .def("apply", &BaseCore::Transformer::apply)
                .def("d", &BaseCore::Transformer::d)
                .def("dTransform", &BaseCore::Transformer::dTransform)
                ;
            bp::class_< bpx::const_aware<BaseCore::Convolution> >("Convolution", bp::no_init)
                .def("copy", &BaseCore::Convolution::copy)
                .def("inPlace", &BaseCore::Convolution::inPlace)
                .def("apply", &BaseCore::Convolution::apply)
                .def("d", &BaseCore::Convolution::d)
                ;
            wrapper
                .def(bp::self == bp::self)
                .def(bp::self != bp::self)
                .@Member(getParameterVector, policies={bpx::squeeze_matrix<>()})
                .@Member(transform[const], policies={ConstHelperPolicies()})
                .@Member(transform[nonconst], policies={HelperPolicies()})
                .@Member(convolve[const], policies={ConstHelperPolicies()})
                .@Member(convolve[nonconst], policies={HelperPolicies()})
                .@Member(getGridTransform, pointer={&getGridTransform})
                ;
        }

    };

    @Class(Ellipse, exclude_list=[readParameters, writeParameters, getCore]) {

        typedef Ellipse::Envelope Envelope;

        static AffineTransform getGridTransform(Ellipse const & self) {
            return self.getGridTransform();
        }

        @Customize {
            bp::class_< bpx::const_aware<Ellipse::Transformer> >("Transformer", bp::no_init)
                .def("copy", &Ellipse::Transformer::copy)
                .def("inPlace", &Ellipse::Transformer::inPlace)
                .def("d", &Ellipse::Transformer::d)
                .def("dTransform", &Ellipse::Transformer::dTransform)
                ;
            bp::class_< bpx::const_aware<Ellipse::Convolution> >("Convolution", bp::no_init)
                .def("copy", &Ellipse::Convolution::copy)
                .def("inPlace", &Ellipse::Convolution::inPlace)
                .def("d", &Ellipse::Convolution::d)
                ;
            wrapper
                .def(bp::self == bp::self)
                .def(bp::self != bp::self)
                .@Member(getParameterVector, policies={bpx::squeeze_matrix<>()})
                .@Member(transform[const], policies={ConstHelperPolicies()})
                .@Member(transform[nonconst], policies={HelperPolicies()})
                .@Member(convolve[const], policies={ConstHelperPolicies()})
                .@Member(convolve[nonconst], policies={HelperPolicies()})
                .@Member(getCenter, policies={bpx::return_internal<>()})
                .@Member(getCorePtr, pyname="getCore")
                .@Member(getGridTransform, pointer={&getGridTransform})
                ;
        }  
    };

    @Class(Axes, exclude_list=[readParameters, writeParameters]) {};

    @Class(Quadrupole, exclude_list=[readParameters, writeParameters]) {
        @Customize {
            wrapper.@Member(getMatrix, policies={bpx::return_internal_matrix<>()});
        }
    };

}

@Namespace(lsst::afw::geom::ellipses::detail) {

    @Class(EllipticityBase) {
        @Customize {
            wrapper
                .@Member(getComplex, policies={bp::return_value_policy<bp::return_by_value>()})
                .add_property("e", &EllipticityBase::getE, &EllipticityBase::setE)
                .add_property("theta", &EllipticityBase::getTheta)
            ;
        }
    };

}

@Namespace(lsst::afw::geom::ellipses) {

    @Class(Distortion) {};
    @Class(ConformalShear) {};
    @Class(ReducedShear) {};

    template <typename T>
        struct PyRadius {
    
        static double get(T const & self) { return self; }
        static void set(T & self, double value) { self = value; }
        
        static void declare(char const * name) {
            bp::class_< bpx::const_aware<T> >(name, bp::init<double>(bp::arg("value")=double(T())))
                .def(float_(bp::self))
                .def(str(bp::self))
                .enable_shared_ptr()
                .def("normalize", &T::normalize)
                .def("getName", &T::getName)
                .def("get", &get)
                .def("set", &set)
                .add_property("value", &get, &set)
            ;
            bp::implicitly_convertible<T,double>();
        }
    };

    template <typename Ellipticity, typename Radius>
    @TemplateClass(
        Separable, tparams={<Ellipticity,Radius>},
        exclude_list=[readParameters, writeParameters]
    ) {
        static void setEllipticity(Separable<Ellipticity,Radius> & self, Ellipticity const & ellipticity) {
            self.getEllipticity() = ellipticity;
        }
        @Customize {
            wrapper
                .@Member(getRadius, policies={bpx::return_internal<>()})
                .@Member(getEllipticity, policies={bpx::return_internal<>()})
                .def("setEllipticity", &setEllipticity)
                ;
        }
    };

    template <typename Radius>
    void instantiateSeparable(std::string const & radius) {
        PyRadius<Radius>::declare(radius.c_str());
        PySeparable<Distortion,Radius>::declare(("SeparableDistortion" + radius).c_str());
        PySeparable<ReducedShear,Radius>::declare(("SeparableReducedShear" + radius).c_str());
        PySeparable<ConformalShear,Radius>::declare(("SeparableConformalShear" + radius).c_str());
    }
    
    @Class(Parametric) {
        @Customize {
            wrapper.def("__call__", &Parametric::operator());
        }
    };

    void declare() {
        PyBaseCore::declare();
        PyEllipse::declare();
        PyAxes::declare();
        PyQuadrupole::declare();
        detail::PyEllipticityBase::declare();
        PyDistortion::declare();
        PyConformalShear::declare();
        PyReducedShear::declare();
        instantiateSeparable<DeterminantRadius>("DeterminantRadius");
        instantiateSeparable<TraceRadius>("TraceRadius");
        instantiateSeparable<LogDeterminantRadius>("LogDeterminantRadius");
        instantiateSeparable<LogTraceRadius>("LogTraceRadius");
        PyParametric::declare();
    }

}

BOOST_PYTHON_MODULE(_afw_geom_ellipses) {
    bpx::numpy::initialize();
    bp::import("lsst.afw.geom");
    lsst::afw::geom::ellipses::declare();
}
