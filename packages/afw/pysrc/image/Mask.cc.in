#include "lsst/bputils.h"
#include "lsst/bputils/containers.h"
#include "lsst/bputils/pickle.h"
#include "lsst/afw/image/Mask.h"
#include "lsst/afw/formatters/MaskFormatter.h"

#include "boost/python/extensions/ndarray.hpp"

namespace bp = boost::python;
namespace bpx = boost::python::extensions;

@Namespace(lsst::afw::image) {

    template <typename MaskPixelT>
    @TemplateClass(
        Mask, tparams={<MaskPixelT>}, exclude_list=[getMaskPlaneDict, swap], 
        bases={ImageBase<MaskPixelT>}
    ) {
        static void setAll(Mask<MaskPixelT> & self, MaskPixelT value) { self = value; }
        static void setPixel(Mask<MaskPixelT> & self, int x, int y, MaskPixelT value) {
            self(x, y, CheckIndices(true)) = value;
        }
        static MaskPixelT getPixel(Mask<MaskPixelT> const & self, int x, int y) {
            return self(x, y, CheckIndices(true));
        }
        static MaskPixelT getPixelPlane(Mask<MaskPixelT> const & self, int x, int y, int plane) {
            return self(x, y, plane, CheckIndices(true));
        }
        static Image<MaskPixelT> convert(Mask<MaskPixelT> const & self) {
            return Image<MaskPixelT>(ndarray::copy(self.getArray()), false, self.getXY0());
        }
        @Customize {
            wrapper.def("set", &setAll);
            wrapper.def("set", &setPixel);
            wrapper.def("get", &getPixel);
            wrapper.def("get", &getPixelPlane);
            wrapper.def(bp::self |= bp::self);
            wrapper.def(bp::self |= bp::other<MaskPixelT>());
            wrapper.def(bp::self &= bp::self);
            wrapper.def(bp::self &= bp::other<MaskPixelT>());
            wrapper.def(bp::self ^= bp::self);
            wrapper.def(bp::self ^= bp::other<MaskPixelT>());
            wrapper.@Member(
                getMaskPlaneDict, policies={bp::return_value_policy< bp::copy_const_reference >()}
            );
            wrapper.def("convertU", &convert);
            bputils::BoostPickleInterface< Mask<MaskPixelT> >::apply(wrapper);
        }
    };

}

@Namespace(lsst::afw::image, anonymous=False) {
    void declareMask() {
        bputils::PyContainer< std::map<std::string, int> >::declare("MaskPlaneDict");
        PyMask< MaskPixel >::declare("MaskU");
    }
}
