#include "lsst/bputils.h"
#include "lsst/bputils/containers.h"
#include "lsst/afw/math/SpatialCell.h"
#include "lsst/afw/image/Image.h"
#include "lsst/afw/image/MaskedImage.h"

namespace bp = boost::python;
namespace bpx = boost::python::extensions;

@Customize {}

@Namespace(lsst::afw::math) {

    @Class(SpatialCellCandidate, noncopyable=True, exclude_list=[SpatialCellCandidate]) {};

    @Class(CandidateVisitor, noncopyable=True) {};

    template <typename ImageT>
    @TemplateClass(
        SpatialCellImageCandidate, noncopyable=True, tparams={<ImageT>},
        exclude_list=[SpatialCellImageCandidate, getImage]
    ) {
        @Customize {
            wrapper.@Member(getImage, pointer={&SpatialCellImageCandidate<ImageT>::getImage});
        }
    };

    @Class(SpatialCell, exclude_list=[SpatialCell, begin, end, CandidateList]) {
        @Customize {
            bputils::PyContainer<SpatialCell::CandidateList>::declare("CandidateList");
            wrapper.@Member(getBBox, policies={bp::return_value_policy<bp::copy_const_reference>()});
            wrapper.@Member(
                SpatialCell, 
                args={(bp::arg("label"), bp::arg("bbox")=geom::Box2I(), bp::arg("candidateList")=bp::tuple())}
            );
            wrapper.main_class().def("__iter__", bp::iterator<SpatialCell>());
        }
    };

    @Class(SpatialCellSet, exclude_list=[CellList]) {
        @Customize {
            bputils::PyContainer<SpatialCellSet::CellList>::declare("CellList");
            wrapper.@Member(getCellList, policies={bpx::return_internal<>()});
        }
    };

}

@Namespace(lsst::afw::math, anonymous=False) {
    void declareSpatialCell() {
        PySpatialCellCandidate::declare();
        PyCandidateVisitor::declare();
        PySpatialCellImageCandidate< image::Image<float> >::declare("SpatialCellImageCandidateF");
        PySpatialCellImageCandidate< image::Image<double> >::declare("SpatialCellImageCandidateD");
        PySpatialCellImageCandidate< image::MaskedImage<float> >::declare("SpatialCellImageCandidateMF");
        PySpatialCellImageCandidate< image::MaskedImage<double> >::declare("SpatialCellImageCandidateMD");
        PySpatialCell::declare();
        PySpatialCellSet::declare();
    }
}
