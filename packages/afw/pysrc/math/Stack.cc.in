#include "lsst/bputils.h"
#include "lsst/bputils/containers.h"
#include "lsst/afw/math/Stack.h"

namespace bp = boost::python;
namespace bpx = boost::python::extensions;

@Namespace(lsst::afw::math) {
    template <typename PixelT>
    void declareStatisticsStack(std::string const & t) {
        bputils::PyContainer< std::vector<typename image::Image<PixelT>::Ptr> >::declare(
            ("ImageVector" + t).c_str()
        );
        bputils::PyContainer< std::vector<typename image::MaskedImage<PixelT>::Ptr> >::declare(
            ("MaskedImageVector" + t).c_str()
        );
        bputils::PyContainer< std::vector<PixelT> >::declare(
            ("Vector" + t).c_str()
        );
        bputils::PyContainer< std::vector< boost::shared_ptr< std::vector<PixelT> > > >::declare(
            ("VectorVector" + t).c_str()
        );
        @Function(statisticsStack, tparams={<PixelT>});
    }
}

@Namespace(lsst::afw::math, anonymous=False) {
    void declareStack() {
        declareStatisticsStack<float>("F");
        declareStatisticsStack<double>("D");
    }
}
