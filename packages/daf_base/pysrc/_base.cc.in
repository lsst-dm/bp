#include "lsst/bputils.h"
#include "lsst/daf/base.h"

#include <sstream>
#include "boost/scoped_ptr.hpp"

namespace bp = boost::python;

namespace lsst { namespace daf { namespace base { %%scope(lsst::daf::base)%%

namespace {

struct PyCitizen {

    // wraper for std::ostream overload of census
    static bp::str census1(Citizen::memId startingMemId) {
        std::ostringstream oss;
        Citizen::census(oss, startingMemId);
        return bp::str(oss.str());
    }

    // Wrapper vector-returning overload of census, because it isn't safe as is.
    // This still may not be totally safe, but I think it's safer.
    static bp::list census2() {
        typedef std::vector<const Citizen *> CensusVector;
        bp::list result;
        boost::scoped_ptr< CensusVector const > v(Citizen::census());
        for (CensusVector::const_iterator i = v->begin(); i != v->end(); ++i) {
            result.append(bp::ptr(*i));
        }
        return result;
    }

    static void declare() {
        auto wrapper = bp::make_const_aware(
            %%auto_class<Citizen>%%
        );
        %%ignore_members(Citizen,census,setNewCallback,setDeleteCallback,setCorruptionCallback)%%
        wrapper
            .%%auto_members_regex(.*)%%
            .def(
                "census", &census1, bp::arg("startingMemId"),
                %%doc(Citizen::census[stream])%%
            )
            .def(
                "census", &census2,
                %%doc(Citizen::census[vector])%%
                "NOTE: In Python, the user will not have to delete the returned list,\n"
                "but its elements are highly unsafe and may become dangling references\n"
                "to nonexistent C++ objects without warning.\n"
            )
            .%%auto_method(census[count])%%
            .enable_shared_ptr()
            ;
        %%finish_class%%
    }

};

struct PyDateTime {

    static void declare() {
        auto wrapper = bp::make_const_aware(
            %%auto_class<DateTime>%%
        );
        %%ignore_members(DateTime,nsecs,mjd,get,gmtime,timespec,timeval)%%
        {
            bp::scope inDateTime(wrapper.main_class());
            %%auto_enum(DateTime::Timescale)%%
                  .export_values();
            %%auto_enum(DateTime::DateSystem)%%
                  .export_values();
        }
        wrapper
              .enable_shared_ptr()
              .%%auto_members_regex(.*)%%
              // bpdox doesn't work on some of these these members, because Doxygen doesn't parse the 
              // enum values used as defaults so they don't up in the class scope.  So I used
              // auto_init, copied the results here, and changed them slightly.
              .def(
                  bp::init< double, DateTime::DateSystem, DateTime::Timescale >(
                      (bp::arg("date"), bp::arg("system")=DateTime::MJD, bp::arg("scale")=DateTime::TAI),
                      %%doc(DateTime::DateTime[double])%%
                  )
              )
              .def(
                  bp::init< int, int, int, int, int, int, DateTime::Timescale >(
                      (bp::arg("year"), bp::arg("month"), bp::arg("day"), bp::arg("hr"), 
                       bp::arg("min"), bp::arg("sec"), bp::arg("scale")=DateTime::TAI),
                      %%doc(DateTime::DateTime[ints])%%
                  )
              )
              .def(
                  bp::init< std::string const & >(
                      (bp::arg("iso8601")),
                      %%doc(DateTime::DateTime[string])%%
                  )
              )
              // This constructor (below) needs to go last, because a single int or long argument in
              // Python will also match the constructor that takes a double, and Boost.Python tries
              // the last method wrapped first.  Ultimately, we should probably use static member functions
              // in C++ to make these more explicit.
              .def(
                  bp::init< long long, DateTime::Timescale >(
                      (bp::arg("nsecs")=0LL, bp::arg("scale")=DateTime::TAI),
                      %%doc(DateTime::DateTime[nsecs])%%
                  )
              )
              .def("nsecs", &DateTime::nsecs, (bp::arg("scale")=DateTime::TAI))
              .def("mjd", &DateTime::mjd, (bp::arg("scale")=DateTime::TAI))
              .def(
                  "get", &DateTime::get, (bp::arg("system")=DateTime::MJD, bp::arg("scale")=DateTime::TAI),
                  %%doc(DateTime::get)%%
              )
              .def("__str__", &DateTime::toString)
              ;
        %%finish_class%%;
    }
    
};

struct PyPersistable {

    static void declare() {
        bp::make_const_aware(
            %%auto_class< Persistable >%%
        ).enable_shared_ptr();
    }

};

struct PyPropertySet {

    template <typename T, typename Wrapper>
    static void addAccessors(Wrapper & cls, std::string const & name) {
        typedef T (PropertySet::*DefaultGetter)(std::string const &, T const &) const;
        typedef T (PropertySet::*BasicGetter)(std::string const &) const;
        typedef void (PropertySet::*VectorAccessor)(std::string const &, std::vector<T> const &);
        typedef void (PropertySet::*ScalarAccessor)(std::string const &, T const &);
        cls.def(
            ("get" + name).c_str(), (BasicGetter)&PropertySet::get<T>, bp::arg("name"),
            %%doc(PropertySet::get[nodefault])%%
        );
        cls.def(
            ("get" + name).c_str(), (DefaultGetter)&PropertySet::get<T>,
            (bp::arg("name"), bp::arg("default")),
            %%doc(PropertySet::get[withdefault])%%
        );
        // Note: we wrap the vector ones first, so they'll get tried last when overloading...
        // because a Python str is a sequence of str, it matches std::vector<std::string>
        // as well as std::string.
        cls.def(
            ("set" + name).c_str(), (VectorAccessor)&PropertySet::set<T>, 
            (bp::arg("name"), bp::arg("value")),
            %%doc(PropertySet::set[vector])%%
        );
        cls.def(
            ("add" + name).c_str(), (VectorAccessor)&PropertySet::add<T>,
            (bp::arg("name"), bp::arg("value")),
            %%doc(PropertySet::add[vector])%%
        );
        cls.def(
            ("set" + name).c_str(), (ScalarAccessor)&PropertySet::set<T>, 
            (bp::arg("name"), bp::arg("value")),
            %%doc(PropertySet::set[scalar])%%
        );
        cls.def(
            ("add" + name).c_str(), (ScalarAccessor)&PropertySet::add<T>,
            (bp::arg("name"), bp::arg("value")),
            %%doc(PropertySet::add[scalar])%%
        );
        cls.def(
            ("getArray" + name).c_str(), &PropertySet::getArray<T>, 
            (bp::arg("name"), bp::arg("value")), 
            bp::return_value_policy<bp::copy_to_tuple>(),
            %%doc(PropertySet::getArray)%%
        );
        cls.setattr(("TYPE_" + name).c_str(), typeid(T).name());
    }

    static bp::str typeOf(PropertySet const & self, std::string const & name) {
        return bp::str(self.typeOf(name).name());
    }

    static void declare() {

        auto wrapper = bp::make_const_aware(
            %%auto_class<PropertySet,noncopyable>(bp::init<>())%%
        );
        %%ignore_members(names,paramNames,propertySetNames,typeOf,get,getArray,add,set)%%
        wrapper
              .enable_shared_ptr()
              .%%auto_members_regex(.*)%%
              .%%auto_method(names, bp::return_value_policy<bp::copy_to_list>())%%
              .%%auto_method(paramNames, bp::return_value_policy<bp::copy_to_list>())%%
              .%%auto_method(propertySetNames, bp::return_value_policy<bp::copy_to_list>())%%
              .def(
                  "typeOf", &typeOf, bp::arg("name"),
                  %%doc(PropertySet::typeOf)%%
              )
              ;
        addAccessors<bool>(wrapper, "Bool");
        addAccessors<short>(wrapper, "Short");
        addAccessors<int>(wrapper, "Int");
        addAccessors<long>(wrapper, "Long");
        addAccessors<long long>(wrapper, "LongLong");
        addAccessors<float>(wrapper, "Float");
        addAccessors<double>(wrapper, "Double");
        addAccessors<std::string>(wrapper, "String");
        addAccessors<DateTime>(wrapper, "DateTime");
        bp::container_from_python_sequence< std::vector<DateTime> >();
        %%finish_class%%;
    }

};

struct PyPropertyList {

    template <typename T, typename Wrapper>
    static void addAccessors(Wrapper & cls, std::string const & name) {
        typedef T (PropertyList::*DefaultGetter)(std::string const &, T const &) const;
        typedef T (PropertyList::*BasicGetter)(std::string const &) const;
        typedef void (PropertyList::*VectorAccessor)(
            std::string const &, std::vector<T> const &, bool
        );
        typedef void (PropertyList::*ScalarAccessor)(
            std::string const &, T const &, bool
        );
        typedef void (PropertyList::*VectorAccessorC)(
            std::string const &, std::vector<T> const &, std::string const &, bool
        );
        typedef void (PropertyList::*ScalarAccessorC)(
            std::string const &, T const &, std::string const &, bool
        );
        cls.def(
            ("get" + name).c_str(), (BasicGetter)&PropertyList::get<T>, bp::arg("name"),
            %%doc(PropertyList::get[nodefault])%%
        );
        cls.def(
            ("get" + name).c_str(), (DefaultGetter)&PropertyList::get<T>,
            (bp::arg("name"), bp::arg("default")),
            %%doc(PropertyList::get[withdefault])%%
        );
        cls.def(
            ("set" + name).c_str(), (VectorAccessor)&PropertyList::set<T>, 
            (bp::arg("name"), bp::arg("value"), bp::arg("inPlace")=true),
            %%doc(PropertyList::set[vector])%%
        );
        cls.def(
            ("add" + name).c_str(), (VectorAccessor)&PropertyList::add<T>,
            (bp::arg("name"), bp::arg("value"), bp::arg("inPlace")=true),
            %%doc(PropertyList::add[vector])%%
        );
        cls.def(
            ("set" + name).c_str(), (ScalarAccessor)&PropertyList::set<T>, 
            (bp::arg("name"), bp::arg("value"), bp::arg("inPlace")=true),
            %%doc(PropertyList::set[scalar])%%
        );
        cls.def(
            ("add" + name).c_str(), (ScalarAccessor)&PropertyList::add<T>,
            (bp::arg("name"), bp::arg("value"), bp::arg("inPlace")=true),
            %%doc(PropertyList::add[scalar])%%
        );
        cls.def(
            ("set" + name).c_str(), (VectorAccessorC)&PropertyList::set<T>, 
            (bp::arg("name"), bp::arg("value"), bp::arg("comment"), bp::arg("inPlace")=true),
            %%doc(PropertyList::set[vector_c])%%
        );
        cls.def(
            ("add" + name).c_str(), (VectorAccessorC)&PropertyList::add<T>,
            (bp::arg("name"), bp::arg("value"), bp::arg("comment"), bp::arg("inPlace")=true),
            %%doc(PropertyList::add[vector_c])%%
        );
        cls.def(
            ("set" + name).c_str(), (ScalarAccessorC)&PropertyList::set<T>, 
            (bp::arg("name"), bp::arg("value"), bp::arg("comment"), bp::arg("inPlace")=true),
            %%doc(PropertyList::set[scalar_c])%%
        );
        cls.def(
            ("add" + name).c_str(), (ScalarAccessorC)&PropertyList::add<T>,
            (bp::arg("name"), bp::arg("value"), bp::arg("comment"), bp::arg("inPlace")=true),
            %%doc(PropertyList::add[scalar_c])%%
        );
        cls.def(
            ("getArray" + name).c_str(), &PropertyList::getArray<T>, 
            (bp::arg("name"), bp::arg("value")), bp::return_value_policy<bp::copy_to_tuple>(),
            %%doc(PropertyList::getArray)%%
        );
        cls.setattr(("TYPE_" + name).c_str(), typeid(T).name());
    }

    static void declare() {
        auto wrapper = bp::make_const_aware(
            %%auto_class<PropertyList,noncopyable>(bp::init<>())%%
        );
        %%ignore_members(getOrderedNames,begin,end,get,getArray,set,add)%%
        wrapper
              .enable_shared_ptr()
              .%%auto_members_regex(.*)%%
              .%%auto_method(getOrderedNames, bp::return_value_policy<bp::copy_to_tuple>())%%
              ;
        addAccessors<bool>(wrapper, "Bool");
        addAccessors<short>(wrapper, "Short");
        addAccessors<int>(wrapper, "Int");
        addAccessors<long>(wrapper, "Long");
        addAccessors<long long>(wrapper, "LongLong");
        addAccessors<float>(wrapper, "Float");
        addAccessors<double>(wrapper, "Double");
        addAccessors<std::string>(wrapper, "String");
        addAccessors<DateTime>(wrapper, "DateTime");
        %%finish_class%%;
    }

};

void declareBase() {
    PyCitizen::declare();
    PyDateTime::declare();
    PyPersistable::declare();
    PyPropertySet::declare();
    PyPropertyList::declare();
    bputils::declareException<TypeMismatchException,pex::exceptions::LogicErrorException>(
        "TypeMismatchException"
    );
}

} // anonymous

}}} // namespace lsst::daf::base

BOOST_PYTHON_MODULE(_base) {
    lsst::bputils::registerConversions();
    bp::import("lsst.pex.exceptions"); // need to import this so we can subclass LogicErrorException
    lsst::daf::base::declareBase();
}
