#include "lsst/bputils.h"
#include "lsst/daf/base.h"

#include <sstream>
#include "boost/scoped_ptr.hpp"

namespace bp = boost::python;

@Customize {}

@Namespace(lsst::daf::base) {

    @Class(
        Citizen, 
        exclude_list=[Citizen, census, setNewCallback, setDeleteCallback, setCorruptionCallback, memCallback]
    ) {

        // Wrapper for std::ostream overload of census, since it's more convenient to use strings in Python
        static bp::str census1(Citizen::memId startingMemId) {
            std::ostringstream oss;
            Citizen::census(oss, startingMemId);
            return bp::str(oss.str());
        }
        
        // Wrapper for vector-returning overload of census, because it isn't safe as is.
        // This still may not be totally safe, but it's probably an improvement better.
        static bp::list census2() {
            typedef std::vector<const Citizen *> CensusVector;
            bp::list result;
            boost::scoped_ptr< CensusVector const > v(Citizen::census());
            for (CensusVector::const_iterator i = v->begin(); i != v->end(); ++i) {
                result.append(bp::ptr(*i));
            }
            return result;
        }

        @Customize {
            wrapper
                .def(
                    "census", &census1, bp::arg("startingMemId"),
                    @Doc(Citizen::census[stream])
                )
                .def(
                    "census", &census2,
                    @Doc(Citizen::census[vector])
                    "NOTE: In Python, the user will not have to delete the returned list,\n"
                    "but its elements are highly unsafe and may become dangling references\n"
                    "to nonexistent C++ objects without warning.\n"
                )
                .@Member(Citizen::census[count])
                ;
        }
        
    };

    @Class(DateTime, exclude_list=[gmtime, timespec, timeval]) {

        // Doxygen doesn't parse these into hyperlinks when used as default values, so bpdox can't put them
        // into the right scope.  But we can redeclare them here so the automatic wrappers work.
        static DateTime::Timescale const TAI = DateTime::TAI;
        static DateTime::DateSystem const MJD = DateTime::MJD;

        @Customize {
            // This constructor (below) needs to go last, because a single int or long argument in
            // Python will also match the constructor that takes a double, and Boost.Python tries
            // the last method wrapped first.  Ultimately, we should probably use static member functions
            // in C++ to make these more explicit.
            wrapper.@Member(DateTime::DateTime[nsecs]);
            wrapper.def("__str__", &DateTime::toString);
        }
    };
    
    // You can't take the address of a const-initialized static data member unless you provide
    // a definition outside the class.  Otherwise you get linker errors, because Boost.Python
    // accepts these by const-reference.
    DateTime::Timescale const PyDateTime::TAI;
    DateTime::DateSystem const PyDateTime::MJD;

    @Class(Persistable, noncopyable=True) {};

    @Class(
        PropertySet, 
        noncopyable=True, 
        exclude_list=[get, getArray, add, set]
    ) {
        
        template <typename T, typename Wrapper>
            static void addAccessors(Wrapper & wrapper, std::string const & name) {
            typedef T (PropertySet::*DefaultGetter)(std::string const &, T const &) const;
            typedef T (PropertySet::*BasicGetter)(std::string const &) const;
            typedef void (PropertySet::*VectorAccessor)(std::string const &, std::vector<T> const &);
            typedef void (PropertySet::*ScalarAccessor)(std::string const &, T const &);
            wrapper.def(
                ("get" + name).c_str(), (BasicGetter)&PropertySet::get<T>, bp::arg("name"),
                @Doc(PropertySet::get[nodefault])
            );
            wrapper.def(
                ("get" + name).c_str(), (DefaultGetter)&PropertySet::get<T>,
                (bp::arg("name"), bp::arg("default")),
                @Doc(PropertySet::get[withdefault])
            );
            // Note: we wrap the vector ones first, so they'll get tried last when overloading...
            // because a Python str is a sequence of str, it matches std::vector<std::string>
            // as well as std::string.
            wrapper.def(
                ("set" + name).c_str(), (VectorAccessor)&PropertySet::set<T>, 
                (bp::arg("name"), bp::arg("value")),
                @Doc(PropertySet::set[vector])
            );
            wrapper.def(
                ("add" + name).c_str(), (VectorAccessor)&PropertySet::add<T>,
                (bp::arg("name"), bp::arg("value")),
                @Doc(PropertySet::add[vector])
            );
            wrapper.def(
                ("set" + name).c_str(), (ScalarAccessor)&PropertySet::set<T>, 
                (bp::arg("name"), bp::arg("value")),
                @Doc(PropertySet::set[scalar])
            );
            wrapper.def(
                ("add" + name).c_str(), (ScalarAccessor)&PropertySet::add<T>,
                (bp::arg("name"), bp::arg("value")),
                @Doc(PropertySet::add[scalar])
            );
            wrapper.def(
                ("getArray" + name).c_str(), &PropertySet::getArray<T>, 
                (bp::arg("name"), bp::arg("value")), 
                bp::return_value_policy<bp::copy_to_tuple>(),
                @Doc(PropertySet::getArray)
            );
            wrapper.setattr(("TYPE_" + name).c_str(), typeid(T).name());
        }

        static bp::str typeOf(PropertySet const & self, std::string const & name) {
            return bp::str(self.typeOf(name).name());
        }
        
        @Customize {
            wrapper
                .@Member(names, policies={bp::return_value_policy<bp::copy_to_list>()})
                .@Member(paramNames, policies={bp::return_value_policy<bp::copy_to_list>()})
                .@Member(propertySetNames, policies={bp::return_value_policy<bp::copy_to_list>()})
                .@Member(typeOf, pointer={&typeOf})
                ;
            addAccessors<bool>(wrapper, "Bool");
            addAccessors<short>(wrapper, "Short");
            addAccessors<int>(wrapper, "Int");
            addAccessors<long>(wrapper, "Long");
            addAccessors<long long>(wrapper, "LongLong");
            addAccessors<float>(wrapper, "Float");
            addAccessors<double>(wrapper, "Double");
            addAccessors<std::string>(wrapper, "String");
            addAccessors<DateTime>(wrapper, "DateTime");
            bp::container_from_python_sequence< std::vector<DateTime> >();
        }

    };

    @Class(
        PropertyList, 
        noncopyable=True,
        exclude_list=[begin, end, get, getArray, set, add]
    ) {

        template <typename T, typename Wrapper>
        static void addAccessors(Wrapper & wrapper, std::string const & name) {
            typedef T (PropertyList::*DefaultGetter)(std::string const &, T const &) const;
            typedef T (PropertyList::*BasicGetter)(std::string const &) const;
            typedef void (PropertyList::*VectorAccessor)(
                std::string const &, std::vector<T> const &, bool
            );
            typedef void (PropertyList::*ScalarAccessor)(
                std::string const &, T const &, bool
            );
            typedef void (PropertyList::*VectorAccessorC)(
                std::string const &, std::vector<T> const &, std::string const &, bool
            );
            typedef void (PropertyList::*ScalarAccessorC)(
                std::string const &, T const &, std::string const &, bool
            );
            wrapper.def(
                ("get" + name).c_str(), (BasicGetter)&PropertyList::get<T>, bp::arg("name"),
                @Doc(PropertyList::get[nodefault])
            );
            wrapper.def(
                ("get" + name).c_str(), (DefaultGetter)&PropertyList::get<T>,
                (bp::arg("name"), bp::arg("default")),
                @Doc(PropertyList::get[withdefault])
            );
            wrapper.def(
                ("set" + name).c_str(), (VectorAccessor)&PropertyList::set<T>, 
                (bp::arg("name"), bp::arg("value"), bp::arg("inPlace")=true),
                @Doc(PropertyList::set[vector])
            );
            wrapper.def(
                ("add" + name).c_str(), (VectorAccessor)&PropertyList::add<T>,
                (bp::arg("name"), bp::arg("value"), bp::arg("inPlace")=true),
                @Doc(PropertyList::add[vector])
            );
            wrapper.def(
                ("set" + name).c_str(), (ScalarAccessor)&PropertyList::set<T>, 
                (bp::arg("name"), bp::arg("value"), bp::arg("inPlace")=true),
                @Doc(PropertyList::set[scalar])
            );
            wrapper.def(
                ("add" + name).c_str(), (ScalarAccessor)&PropertyList::add<T>,
                (bp::arg("name"), bp::arg("value"), bp::arg("inPlace")=true),
                @Doc(PropertyList::add[scalar])
            );
            wrapper.def(
                ("set" + name).c_str(), (VectorAccessorC)&PropertyList::set<T>, 
                (bp::arg("name"), bp::arg("value"), bp::arg("comment"), bp::arg("inPlace")=true),
                @Doc(PropertyList::set[vector_c])
            );
            wrapper.def(
                ("add" + name).c_str(), (VectorAccessorC)&PropertyList::add<T>,
                (bp::arg("name"), bp::arg("value"), bp::arg("comment"), bp::arg("inPlace")=true),
                @Doc(PropertyList::add[vector_c])
            );
            wrapper.def(
                ("set" + name).c_str(), (ScalarAccessorC)&PropertyList::set<T>, 
                (bp::arg("name"), bp::arg("value"), bp::arg("comment"), bp::arg("inPlace")=true),
                @Doc(PropertyList::set[scalar_c])
            );
            wrapper.def(
                ("add" + name).c_str(), (ScalarAccessorC)&PropertyList::add<T>,
                (bp::arg("name"), bp::arg("value"), bp::arg("comment"), bp::arg("inPlace")=true),
                @Doc(PropertyList::add[scalar_c])
            );
            wrapper.def(
                ("getArray" + name).c_str(), &PropertyList::getArray<T>, 
                (bp::arg("name"), bp::arg("value")), bp::return_value_policy<bp::copy_to_tuple>(),
                @Doc(PropertyList::getArray)
            );
            wrapper.setattr(("TYPE_" + name).c_str(), typeid(T).name());
        }

        @Customize {
            wrapper.@Member(getOrderedNames, policies={bp::return_value_policy<bp::copy_to_tuple>()});
            addAccessors<bool>(wrapper, "Bool");
            addAccessors<short>(wrapper, "Short");
            addAccessors<int>(wrapper, "Int");
            addAccessors<long>(wrapper, "Long");
            addAccessors<long long>(wrapper, "LongLong");
            addAccessors<float>(wrapper, "Float");
            addAccessors<double>(wrapper, "Double");
            addAccessors<std::string>(wrapper, "String");
            addAccessors<DateTime>(wrapper, "DateTime");
        }

    };

void declare() {
    PyCitizen::declare();
    PyDateTime::declare();
    PyPersistable::declare();
    PyPropertySet::declare();
    PyPropertyList::declare();
    bputils::declareException< TypeMismatchException, pex::exceptions::LogicErrorException >(
        "TypeMismatchException"
    );
}

}

BOOST_PYTHON_MODULE(_daf_base) {
    lsst::bputils::registerConversions();
    bp::import("lsst.pex.exceptions"); // need to import this so we can subclass LogicErrorException
    lsst::daf::base::declare();
}
