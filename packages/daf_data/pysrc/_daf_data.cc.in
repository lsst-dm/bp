#include "lsst/bputils.h"
#include "lsst/daf/data/Provenance.h"
#include "lsst/daf/data/ReleaseProcess.h"
#include "lsst/daf/data/LsstData.h"
#include "lsst/daf/data/LsstImpl_DC3.h"
#include "lsst/daf/data/LsstBase.h"
#include "lsst/daf/data/LsstDataConfigurator.h"
#include "lsst/daf/data/SupportFactory.h"

namespace bp = boost::python;
namespace bpx = boost::python::extensions;

@Customize {}

@Namespace(lsst::daf::data) {

    @Class(Provenance) {};

    @Class(ReleaseProcess) {};

    @Class(
        LsstData, noncopyable=True, 
        exclude_list=[getChildren, Container, ContainerIterator, IteratorRange]
    ) {};

    @Class(LsstImpl_DC3, exclude_list=[LsstImpl_DC3, getChildren], noncopyable=True) {};

    @Class(LsstBase, exclude_list=[LsstBase], noncopyable=True) {};

    @Class(LsstDataConfigurator, noncopyable=True) {};

    @Class(SupportFactory, noncopyable=True) {
        @Customize {
            wrapper.@Member(the, policies={bp::return_value_policy< bp::reference_existing_object >()});
        }
    };

void declare() {
    PyProvenance::declare();
    PyReleaseProcess::declare();
    PyLsstData::declare();
    PyLsstImpl_DC3::declare();
    PyLsstBase::declare();
    PyLsstDataConfigurator::declare();
    PySupportFactory::declare();
}

}

BOOST_PYTHON_MODULE(_daf_data) {
    bp::import("lsst.daf.base"); // need to import this so we can subclass Citizen
    lsst::daf::data::declare();
}
