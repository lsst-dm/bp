#include "lsst/bputils.h"
#include "lsst/daf/persistence.h"

namespace bp = boost::python;

@Customize {}

@Namespace(lsst::daf::persistence) {

    @Class(DbAuth, const_aware=False, enable_shared_ptr=False) {};

    @Class(LogicalLocation) {};

    @Class(Storage, noncopyable=True) {
        @Customize {
            bp::container_from_python_sequence<Storage::List>();
        }
    };

    @Class(DbStorage, noncopyable=True, exclude_list=[setColumn, condParam, getColumnByPos, outParam]) {
        @Customize {
            bp::container_from_python_sequence<Storage::List>();
            declareTemplates<char>(wrapper, "Char");
            declareTemplates<short>(wrapper, "Short");
            declareTemplates<int>(wrapper, "Int");
            declareTemplates<long>(wrapper, "Long");
            declareTemplates<long long>(wrapper, "Int64");
            declareTemplates<float>(wrapper, "Float");
            declareTemplates<double>(wrapper, "Double");
            declareTemplates<std::string>(wrapper, "String");
            declareTemplates<bool>(wrapper, "Bool");
        }
        template <typename T, typename Wrapper>
        static void declareTemplates(Wrapper & wrapper, std::string const & name) {
            wrapper.def(
                ("setColumn" + name).c_str(), &DbStorage::setColumn<T>,
                (bp::arg("columnName"), bp::arg("value")),
                @Doc(DbStorage::setColumn)
            );
            wrapper.def(
                ("condParam" + name).c_str(), &DbStorage::condParam<T>,
                (bp::arg("paramName"), bp::arg("value")),
                @Doc(DbStorage::condParam)
            );
            wrapper.def(
                ("getColumnByPos" + name).c_str(), &DbStorage::getColumnByPos<T>,
                bp::arg("pos"),
                @Doc(DbStorage::getColumnByPos)
            );
        }
    };

    @Class(DbTsvStorage, noncopyable=True) {};

    @Class(Persistence, noncopyable=True) {
        @Customize {
            wrapper
                .@Member(
                    unsafeRetrieve, 
                    policies={bp::return_value_policy< bp::manage_new_object >()}
                )
                ;
        }
    };

    void declare() {
        PyDbAuth::declare();
        PyLogicalLocation::declare();
        PyStorage::declare();
        PyDbStorage::declare();
        PyDbTsvStorage::declare();
        PyPersistence::declare();
    }
    
}

BOOST_PYTHON_MODULE(_daf_persistence) {
    lsst::bputils::registerConversions();
    bp::import("lsst.daf.base");
    lsst::daf::persistence::declare();
}
