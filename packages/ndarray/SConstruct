import os
import sys
import lsst.scons.SConsUtils as scons
import eups

env = scons.makeEnv("ndarray",
                    r"$HeadURL$",
                    scons.ConfigureDependentProducts("ndarray"))

env.Append(CXXFLAGS="-std=c++0x")

env.Help("""
Multidimensional array support package for C++
""")

###############################################################################
# Boilerplate below here

m4flags = "-I%s" % os.path.join(os.path.abspath(eups.productDir("ndarray")), 'm4')

#
# Build/install things
#
generated = ["#include/lsst/ndarray/ArrayRef.h",
             "#include/lsst/ndarray/operators.h",
             "#include/lsst/ndarray/Vector.h",
             "#include/lsst/ndarray/fft/FFTWTraits.h",
             ]
headers = [env.M4(filename, "%s.m4" % filename, M4FLAGS=m4flags) for filename in generated]

for d in Split("doc tests"):
    SConscript(os.path.join(d, "SConscript"))

env['IgnoreFiles'] = r"(~$|\.pyc$|^\.svn$|\.o$)"


scons.CleanTree(r"*~ core *.so *.os *.o")

env.InstallLSST(env['prefix'], ["etc", "include", "ups", "doc"])

#
# Build TAGS files
#
files = scons.filesToTag()
if files:
    env.Command("TAGS", files, "etags -o $TARGET $SOURCES")

env.Declare()
