#include "lsst/bputils.h"

#include "lsst/pex/logging/LogRecord.h"
#include "lsst/pex/logging/LogFormatter.h"
#include "lsst/pex/logging/LogDestination.h"
#include "lsst/pex/logging/FileDestination.h"
#include "lsst/pex/logging/Log.h"
#include "lsst/pex/logging/Trace.h"
#include "lsst/pex/logging/BlockTimingLog.h"
#include "lsst/pex/logging/Debug.h"
#include "lsst/pex/logging/ScreenLog.h"
#include "lsst/pex/logging/DualLog.h"

namespace bp = boost::python;

@Customize {}

@Namespace(lsst::pex::logging) {

    @Class(LogRecord, exclude_list=[addProperty]) {

        template <typename T, typename Wrapper>
        static void declareTemplates(Wrapper & wrapper, std::string const & name) {
            wrapper.def(
                ("addProperty" + name).c_str(),
                (void (LogRecord::*)(std::string const &, T const &))&LogRecord::addProperty<T>,
                (bp::arg("name"), bp::arg("val")),
                @Doc(LogRecord::addProperty[separate])
            );
        }

        @Customize {
            wrapper
                .@Member(getProperties, policies={bp::const_aware::return_internal<>()})
                .@Member(data, policies={bp::const_aware::return_internal<>()})
            ;
            declareTemplates<bool>(wrapper, "Bool");
            declareTemplates<int>(wrapper, "Int");
            declareTemplates<long>(wrapper, "Long");
            declareTemplates<long long>(wrapper, "LongLong");
            declareTemplates<float>(wrapper, "Float");
            declareTemplates<double>(wrapper, "Double");
            declareTemplates<std::string>(wrapper, "String");
        }

    };
    
    @Class(LogFormatter, noncopyable=True, exclude_list=[LogFormatter]) {};

    @Class(BriefFormatter) {};

    @Class(IndentedFormatter) {};

    @Class(NetLoggerFormatter, exclude_list=[NetLoggerFormatter, defaultValDelim]) {};

    @Class(LogDestination) {};

    @Class(FileDestination, exclude_list=[FileDestination]) {

        @Customize {
            wrapper
                .@Member(
                    FileDestination[formatter],
                    args={(bp::arg("filepath"), bp::arg("formatter"), 
                           bp::arg("threshold")=int(threshold::PASS_ALL), bp::arg("truncate")=false)}
                )
                .@Member(
                    FileDestination[verbose],
                    args={(bp::arg("filepath"), bp::arg("verbose")=false, 
                           bp::arg("threshold")=int(threshold::PASS_ALL), bp::arg("truncate")=false)}
                )
                .@Member(getPath, pointer={&getPath})
                ;
        }

        static std::string getPath(FileDestination const & self) {
            std::ostringstream os;
            os << self.getPath();
            return os.str();
        }

    };

    @Class(
        Log, 
        exclude_list=[log, format, setPreambleProperty, addPreambleProperty]
    ) {
        @Customize {
            wrapper
                .@Member(
                    createChildLog,
                    args={(bp::arg("childName"), bp::arg("threshold")=Log::INHERIT_THRESHOLD)},
                    policies={bp::return_value_policy< bp::manage_new_object >()}
                )
                .@Member(log[properties])
                .@Member(log[simple])
                .@Member(addDestination)
                .def(
                    "addDestination", &addDestination,
                    (bp::arg("filepath"), bp::arg("verbose")=false,
                     bp::arg("threshold")=int(threshold::PASS_ALL))
                )
                .@Member(getPreamble, policies={bp::const_aware::return_internal<>()})
                .@Member(getDefaultLog, policies={bp::return_value_policy< bp::reference_existing_object >()})
                ;
            declareTemplates<bool>(wrapper, "Bool");
            declareTemplates<int>(wrapper, "Int");
            declareTemplates<long>(wrapper, "Long");
            declareTemplates<long long>(wrapper, "LongLong");
            declareTemplates<float>(wrapper, "Float");
            declareTemplates<double>(wrapper, "Double");
            declareTemplates<std::string>(wrapper, "String");
            bp::container_from_python_sequence< std::list< boost::shared_ptr< LogDestination > > >();
        }

        static void addDestination(Log & self, const std::string& filepath, bool verbose, int threshold_) {
            boost::shared_ptr<LogDestination> fdest(new FileDestination(filepath, verbose, threshold_));
            self.addDestination(fdest);
        }
        
        template <typename T, typename Wrapper>
        static void declareTemplates(Wrapper & wrapper, std::string const & name) {
            wrapper.def(
                ("addPreambleProperty" + name).c_str(),
                &Log::addPreambleProperty<T>,
                (bp::arg("name"), bp::arg("val")),
                @Doc(Log::addPreambleProperty)
            );
            wrapper.def(
                ("setPreambleProperty" + name).c_str(),
                &Log::setPreambleProperty<T>,
                (bp::arg("name"), bp::arg("val")),
                @Doc(Log::setPreambleProperty)
            );
            wrapper.def(
                ("logProperty" + name).c_str(),
                (void (Log::*)(int, std::string const &, std::string const &, T const &))&Log::log<T>,
                (bp::arg("importance"), bp::arg("message"), bp::arg("name"), bp::arg("val")),
                @Doc(Log::log[template])
            );
        }

    };

    @Class(LogRec) {
        @Customize {
            wrapper
                .def(
                    "_lshift_cpp", (LogRec & (LogRec::*)(LogRec::Manip))&LogRec::operator<<, 
                    bp::return_self<>()
                )
                .def(
                    "_lshift_cpp", (LogRec & (LogRec::*)(std::string const &))&LogRec::operator<<, 
                    bp::return_self<>()
                )
            ;
        }
    };

    @Class(Trace, exclude_list=[Trace]) {
#if !LSST_NO_TRACE
        @Customize {
            wrapper.def(
                bp::init<std::string const &, int const, std::string const &>(
                    (bp::arg("name"), bp::arg("verbosity"), bp::arg("msg"))
                )
            );
        }
#endif
    };

    @Class(BlockTimingLog) {
        @Customize {
            wrapper.@MemberList(
                [createForBlock, timeBlock],
                policies={bp::return_value_policy< bp::manage_new_object >()}
            );
        }
    };

    @Class(Debug) {};

    @Class(ScreenLog) {};

    @Class(DualLog) {};

    void declare() {
        PyLogRecord::declare();
        PyLogFormatter::declare();
        PyBriefFormatter::declare();
        PyIndentedFormatter::declare();
        PyNetLoggerFormatter::declare();
        PyLogDestination::declare();
        PyLog::declare();
        PyLogRec::declare();
        PyTrace::declare();
        PyBlockTimingLog::declare();
        PyDebug::declare();
        PyScreenLog::declare();
        PyDualLog::declare();
    }

}

BOOST_PYTHON_MODULE(_pex_logging) {
    lsst::bputils::registerConversions();
    bp::import("lsst.daf.base");
    lsst::pex::logging::declare();
}
