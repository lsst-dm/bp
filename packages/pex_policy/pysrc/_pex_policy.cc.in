#include "lsst/bputils.h"
#include "boost/python/extensions/filesystem.hpp"
#include "lsst/pex/policy.h"
#include "lsst/pex/policy/PolicyStreamDestination.h"
#include "lsst/pex/policy/PolicyStringDestination.h"
#include "lsst/pex/policy/paf/PAFWriter.h"

namespace bp = boost::python;
namespace bpx = boost::python::extensions;

@Customize {}

@Namespace(lsst::pex::policy) {

    @Class(
        Policy,
        exclude_list=[typeName, mergeDefaults, getPolicy, set, add, setValue, 
                      addValue, getValue, getValueArray]
    ) {

        @Customize {
            wrapper
                .def(str(bp::self))
                .@Member(getTypeInfo, pointer={&getTypeInfo})
                .@Member(typeOf, pointer={&getTypeInfo})
                .@MemberList(
                    [createPolicy, createPolicyFromUrn], 
                    policies={bp::return_value_policy< bp::manage_new_object >()}
                )
                .def( // these are manual because doxygen bug #648719 screws up the return type
                    "getPolicy",
                    (Policy::ConstPtr (Policy::*)(const std::string &) const)&Policy::getPolicy,
                    (bp::arg("name")),
                    @Doc(getPolicy[const])
                )
                .def(
                    "getPolicy",
                    (Policy::Ptr (Policy::*)(const std::string &))&Policy::getPolicy,
                    (bp::arg("name")),
                    @Doc(getPolicy[nonconst])
                )
                .@MemberRegex("get[^V]\w+Array", policies={bp::return_value_policy<bpx::copy_to_list>()})
                .def( // more from the same doxygen bug
                    "set",
                    (void (Policy::*)(const std::string &, const Policy::Ptr &))&Policy::set,
                    (bp::arg("name"), bp::arg("value")),
                    @Doc(set[policy])
                )
                .@Member(set[file,string,double,int,bool])
                .def(
                    "add",
                    (void (Policy::*)(const std::string &, const Policy::Ptr &))&Policy::add,
                    (bp::arg("name"), bp::arg("value")),
                    @Doc(add[policy])
                )
                .@Member(add[file,string,double,int,bool])
                .def(
                    "mergeDefaults", &Policy::mergeDefaults,
                    (bp::arg("defaultPol"), bp::arg("keepForValidation")=true, bp::arg("errs")=bp::object())
                )
                .def("_setBool", &Policy::setValue<bool>)
                .def("_addBool", &Policy::addValue<bool>)
                .def("_setInt", &Policy::setValue<int>)
                .def("_addInt", &Policy::addValue<int>)
                .def("_typeName", &_typeName)
                .staticmethod("_typeName")
                ;
        }
        
        static char const * _typeName(Policy::ValueType v) {
            return Policy::typeName[v];
        }
        
        static bp::str getTypeInfo(Policy const & self, std::string const & name) {
            return bp::str(self.getTypeInfo(name).name());
        }

    };

    @Exception(
        ValidationError, exclude_list=[clone, getType, what]
    ) {
        @Customize {
            wrapper
                // Because the actual exception type is a proxy, there's some extra 
                // pure Python code to make constructors work (in __init__.py).
                .@Member(getParamNames, policies={bp::return_value_policy<bpx::copy_to_tuple>()})
                ;
        }
    };

    @Class(Definition, exclude_list=[validateBasic]) {};

    @Class(Dictionary) {
        @Customize {
            wrapper.@Member(makeDef, policies={bp::return_value_policy<bp::manage_new_object>()})
            ;
        }
    };

    @Class(PolicyWriter, noncopyable=True, exclude_list=[PolicyWriter]) {};

    @Class(PolicySource, noncopyable=True, exclude_list=[PolicySource]) {};

    @Class(PolicyFile, exclude_list=[PolicyFile]) {
        @Customize {
            wrapper
                // manually wrap two constructors - the others are equivalent or unusable from Python
                // (because SupportedFormats and PolicyParserFactory are not wrapped) 
                .def(
                    bp::init<std::string const &, boost::filesystem::path const &>(
                        (bp::arg("filepath"), bp::arg("reposDir")),
                        "Create a Policy file that points to a file with the given path\n"
                        "in a policy file repository.\n"
                    )
                )
                .def(
                    bp::init<std::string const &>(
                        bp::arg("filepath"),
                        "Create a Policy file that points to a file with the given path."
                    )
                )
                ;
        }
    };

    @Class(DefaultPolicyFile) {
        @Customize {
            wrapper
                .@Member(getRepositoryPath, policies={bp::return_value_policy<bp::copy_const_reference>()})
                ;
        }
    };

    @Class(UrnPolicyFile) {};

    @Class(PolicyString, exclude_list=[PolicyString]) {
        @Customize {
            wrapper
                .def(bp::init<>("Create a null policy from an empty string."))
                .def(
                    bp::init<std::string const &>(
                        bp::arg("data"),
                        "Create a PolicyString that's wrapped around a given string."
                    )
                )
                ;
        }
    };

    @Class(PolicyDestination, noncopyable=True, exclude_list=[PolicyDestination]) {
        @Customize {
            wrapper
                .@Member(getOutputStream, policies={bpx::return_internal<>()})
            ;
        }
    };
    
    @Class(PolicyStreamDestination, exclude_list=[getOutputStream]) {};

    @Class(PolicyStringDestination) {};

}

@Namespace(lsst::pex::policy::paf) {

    @Class(PAFWriter, noncopyable=True) {};
    
}

@Namespace(lsst::pex::policy) {

    void declare() {
        bputils::declareException<BadNameError,pex::exceptions::RuntimeErrorException>("BadNameError");
        bputils::declareException<DictionaryError,pex::exceptions::DomainErrorException>("DictionaryError");
        bputils::declareException<NameNotFound,pex::exceptions::NotFoundException>("NameNotFound");
        bputils::declareException<TypeError,pex::exceptions::DomainErrorException>("TypeError");
        bputils::declareException<ParserError,pex::exceptions::RuntimeErrorException>("ParserError");
        bputils::declareException<EOFError,ParserError>("EOFError");
        bputils::declareException<SyntaxError,ParserError>("SyntaxError");
        bputils::declareException<FormatSyntaxError,SyntaxError>("FormatSyntaxError");
        bputils::declareException<UnsupportedSyntax,SyntaxError>("UnsupportedSyntax");
        PyPolicy::declare();
        PyValidationError::declare();
        PyDefinition::declare();
        PyDictionary::declare();
        PyPolicyWriter::declare();
        PyPolicySource::declare();
        PyPolicyFile::declare();
        PyDefaultPolicyFile::declare();
        PyUrnPolicyFile::declare();
        PyPolicyString::declare();
        PyPolicyDestination::declare();
        PyPolicyStreamDestination::declare();
        PyPolicyStringDestination::declare();
        paf::PyPAFWriter::declare();
    }

}

BOOST_PYTHON_MODULE(_pex_policy) {
    bp::import("lsst.bputils"); // converters for iostreams and boost::filesystem
    bp::import("lsst.daf.base");
    lsst::pex::policy::declare();
}
