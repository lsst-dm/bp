#include "lsst/bputils.h"

#include "lsst/pex/policy.h"
#include "lsst/pex/policy/PolicyStreamDestination.h"
#include "lsst/pex/policy/PolicyStringDestination.h"
#include "lsst/pex/policy/paf/PAFWriter.h"

namespace bp = boost::python;

namespace lsst { namespace pex { namespace policy { %%scope(lsst::pex::policy)%%

namespace {

struct PyPolicy {

    static void declare() {
        auto wrapper = bp::make_const_aware(
            %%auto_class<Policy>%%
        );
        {
            bp::scope inWrapper(wrapper.main_class());
            %%auto_enum(Policy::ValueType)%%
                  .export_values();
        }
        %%ignore_members(typeName, getTypeInfo, typeOf, mergeDefaults)%%;
        %%ignore_members(getPolicy, set, add, setValue, addValue, getValue, getValueArray)%%;
        wrapper.main_class()
            .def(str(bp::self))
            ;
        wrapper
            .copy_method_to_proxy("__str__")
            .enable_shared_ptr()
            .def(
                "getTypeInfo", &getTypeInfo, bp::arg("name"),
                %%doc(Policy::getTypeInfo)%%
            )
            .def(
                "typeOf", &getTypeInfo, bp::arg("name"),
                %%doc(Policy::typeOf)%%
            )
            .%%auto_method(createPolicy, bp::return_value_policy< bp::manage_new_object >())%%
            .%%auto_method(createPolicyFromUrn, bp::return_value_policy< bp::manage_new_object >())%%
            .def( // these are manual because doxygen bug #648719 screws up the return type
                 "getPolicy",
                 (Policy::ConstPtr (Policy::*)(const std::string &) const)&Policy::getPolicy,
                 (bp::arg("name")),
                 %%doc(Policy::getPolicy[const])%%
             )
             .def(
                 "getPolicy",
                 (Policy::Ptr (Policy::*)(const std::string &))&Policy::getPolicy,
                 (bp::arg("name")),
                 %%doc(Policy::getPolicy[nonconst])%%
             )
            .%%auto_method(getPolicyArray, bp::return_value_policy<bp::copy_to_list>())%%
            .%%auto_method(getConstPolicyArray, bp::return_value_policy<bp::copy_to_list>())%%
            .%%auto_method(getFileArray, bp::return_value_policy<bp::copy_to_list>())%%
            .%%auto_method(getBoolArray, bp::return_value_policy<bp::copy_to_list>())%%
            .%%auto_method(getIntArray, bp::return_value_policy<bp::copy_to_list>())%%
            .%%auto_method(getDoubleArray, bp::return_value_policy<bp::copy_to_list>())%%
            .%%auto_method(getStringArray, bp::return_value_policy<bp::copy_to_list>())%%
            .def( // more from the same doxygen bug
                 "set",
                 (void (Policy::*)(const std::string &, const Policy::Ptr &))&Policy::set,
                 (bp::arg("name"), bp::arg("value")),
                 %%doc(Policy::set[policy])%%
            )
            .%%auto_method(set[file,string,double,int,bool])%%
            .def(
                 "add",
                 (void (Policy::*)(const std::string &, const Policy::Ptr &))&Policy::add,
                 (bp::arg("name"), bp::arg("value")),
                 %%doc(Policy::add[policy])%%
            )
            .%%auto_method(add[file,string,double,int,bool])%%
            .def(
                "mergeDefaults", &Policy::mergeDefaults,
                (bp::arg("defaultPol"), bp::arg("keepForValidation")=true, bp::arg("errs")=bp::object())
            )
            .def("_setBool", &Policy::setValue<bool>)
            .def("_addBool", &Policy::addValue<bool>)
            .def("_setInt", &Policy::setValue<int>)
            .def("_addInt", &Policy::addValue<int>)
            .def("_typeName", &_typeName)
            .staticmethod("_typeName")
            .%%auto_members_regex(.*)%%
            ;
    }

    static char const * _typeName(Policy::ValueType v) {
        return Policy::typeName[v];
    }

    static bp::str getTypeInfo(Policy const & self, std::string const & name) {
        return bp::str(self.getTypeInfo(name).name());
    }

};

struct PyValidationError {

    static void declare() {
        auto wrapper = bputils::declareException<
            ValidationError,
            pex::exceptions::LogicErrorException
        >("ValidationError");
        %%in_class(ValidationError)%%
        {
            bp::scope inWrapper(wrapper);
            %%auto_enum(ValidationError::ErrorType)%%
                  .export_values();
        }
        %%ignore_members(clone, getType)%%;
        wrapper
            // Because the actual exception type is a proxy, there's some extra 
            // pure Python code to make constructors work (in __init__.py).
            .%%auto_method(getParamNames, bp::return_value_policy<bp::copy_to_tuple>())%%
            .%%auto_members_regex(.*)%%
            ;
    }

};

struct PyDefinition {

    // Note: some template member functions are not wrapped, because they apparently weren't wrapped
    // in the SWIG interface either.
    // Also, some of the overloads of validate may be inherently ambiguous in Python.
    static void declare() {
        auto wrapper = bp::make_const_aware(
            %%auto_class<Definition>%%
        );
        %%ignore_members(setDefaultIn,validateBasic)%%;
        wrapper
            .enable_shared_ptr()
            .%%auto_method(setDefaultIn[no_name,with_name])%%
            .%%auto_members_regex(.*)%%
            ;
    }

};

struct PyDictionary {

    static void declare() {
        auto wrapper = bp::make_const_aware(
            %%auto_class<Dictionary>%%
        );
        wrapper
            .enable_shared_ptr()
            .%%auto_method(makeDef, bp::return_value_policy< bp::manage_new_object >())%%
            .%%auto_members_regex(.*)%%
            ;
    }

};

struct PyPolicyWriter {

    static void declare() {
        auto wrapper = bp::make_const_aware(
            %%auto_class<PolicyWriter,noncopyable>%%
        );
        %%ignore_members(PolicyWriter)%%;
        wrapper
            .enable_shared_ptr()
            .%%auto_members_regex(.*)%%
            ;
    }

};

struct PyPolicySource {

    static void declare() {
        auto wrapper = bp::make_const_aware(
            %%auto_class<PolicySource,noncopyable>%%
        );
        %%ignore_members(PolicySource)%%;
        wrapper
            .enable_shared_ptr()
            .%%auto_members_regex(.*)%%
            ;
    }
    
};

struct PyPolicyFile {

    static void declare() {
        auto wrapper = bp::make_const_aware(
            %%auto_class<PolicyFile>%%
        );
        %%ignore_members(PolicyFile)%%;
        wrapper
            .enable_shared_ptr()
            // manually wrap two constructors - the others are equivalent or unusable from Python
            // (because SupportedFormats and PolicyParserFactory are not wrapped) 
            .def(
                bp::init<std::string const &, boost::filesystem::path const &>(
                    (bp::arg("filepath"), bp::arg("reposDir")),
                    "Create a Policy file that points to a file with the given path\n"
                    "in a policy file repository.\n"
                )
            )
            .def(
                bp::init<std::string const &>(
                    bp::arg("filepath"),
                    "Create a Policy file that points to a file with the given path."
                )
            )
            .%%auto_members_regex(.*)%%
            ;
    }
    
};

struct PyDefaultPolicyFile {

    static void declare() {
        auto wrapper = bp::make_const_aware(
            %%auto_class<DefaultPolicyFile>%%
        );
        wrapper
            .enable_shared_ptr()
            .%%auto_method(getRepositoryPath, bp::return_value_policy<bp::copy_const_reference>())%%
            .%%auto_members_regex(.*)%%
            ;
    }
    
};

struct PyUrnPolicyFile {

    static void declare() {
        auto wrapper = bp::make_const_aware(
            %%auto_class<UrnPolicyFile>%%
        );
        wrapper
            .enable_shared_ptr()
            .%%auto_members_regex(.*)%%
            ;
    }
    
};

struct PyPolicyString {

    static void declare() {
        auto wrapper = bp::make_const_aware(
            %%auto_class<PolicyString>(bp::init<>("Create a null policy from an empty string."))%%
        );
        %%ignore_members(PolicyString)%%;
        wrapper
            .enable_shared_ptr()
            // manually wrap one more constructor
            .def(
                bp::init<std::string const &>(
                    bp::arg("data"),
                    "Create a PolicyString that's wrapped around a given string."
                )
            )
            .%%auto_members_regex(.*)%%
            ;
    }
    
};

struct PyPolicyDestination {

    static void declare() {
        auto wrapper = bp::make_const_aware(
            %%auto_class<PolicyDestination,noncopyable>%%
        );
        %%ignore_members(PolicyDestination)%%;
        wrapper
            .enable_shared_ptr()
            .%%auto_method(getOutputStream, bp::return_internal_reference<>())%%
            ;
        %%finish_class%%; // warns if we didn't wrap something, since we didn't use regex(.*)
    }

};

struct PyPolicyStreamDestination {

    static void declare() {
        auto wrapper = bp::make_const_aware(
            %%auto_class<PolicyStreamDestination>%%
        );
        %%ignore_members(getOutputStream)%%; // wrapped in base class.
        wrapper
            .enable_shared_ptr()
            .%%auto_init%%
            ;
        %%finish_class%%; // warns if we didn't wrap something, since we didn't use regex(.*)
    }

};

struct PyPolicyStringDestination {

    static void declare() {
        auto wrapper = bp::make_const_aware(
            %%auto_class<PolicyStringDestination>%%
        );
        wrapper
            .enable_shared_ptr()
            .%%auto_init%%
            .%%auto_method(getData)%%
            ;
        %%finish_class%%; // warns if we didn't wrap something, since we didn't use regex(.*)
    }

};

} // anonymous

namespace paf { %%scope(lsst::pex::policy::paf)%%
namespace {

struct PyPAFWriter {

    static void declare() {
        auto wrapper = bp::make_const_aware(
            %%auto_class<PAFWriter,noncopyable>(bp::init<>())%%
        );
        wrapper // all member functions are implementations of virtuals wrapped in PolicyWriter
            .enable_shared_ptr()
            .%%auto_members_regex(.*)%%
            ;
    }

};

} // anonymous
} // namespace paf

namespace {

void declarePolicy() {
    bputils::declareException<BadNameError,pex::exceptions::RuntimeErrorException>("BadNameError");
    bputils::declareException<DictionaryError,pex::exceptions::DomainErrorException>("DictionaryError");
    bputils::declareException<NameNotFound,pex::exceptions::NotFoundException>("NameNotFound");
    bputils::declareException<TypeError,pex::exceptions::DomainErrorException>("TypeError");
    bputils::declareException<ParserError,pex::exceptions::RuntimeErrorException>("ParserError");
    bputils::declareException<EOFError,ParserError>("EOFError");
    bputils::declareException<SyntaxError,ParserError>("SyntaxError");
    bputils::declareException<FormatSyntaxError,SyntaxError>("FormatSyntaxError");
    bputils::declareException<UnsupportedSyntax,SyntaxError>("UnsupportedSyntax");
    PyPolicy::declare();
    PyValidationError::declare();
    PyDefinition::declare();
    PyDictionary::declare();
    PyPolicyWriter::declare();
    PyPolicySource::declare();
    PyPolicyFile::declare();
    PyDefaultPolicyFile::declare();
    PyUrnPolicyFile::declare();
    PyPolicyString::declare();
    PyPolicyDestination::declare();
    PyPolicyStreamDestination::declare();
    PyPolicyStringDestination::declare();
    paf::PyPAFWriter::declare();
}

} // anonymous

}}} // namespace lsst::pex::policy

BOOST_PYTHON_MODULE(_policy) {
    lsst::bputils::registerConversions();
    bp::import("lsst.daf.base");
    lsst::pex::policy::declarePolicy();
}
