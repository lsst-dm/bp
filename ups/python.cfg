# -*- python -*-
"""
Dependencies and configuration for Python
"""
import os.path
import re

dependencies = {
    # Names of packages required to build against this package.
    "required": [],

    # Names of packages optionally setup when building against this package.
    "optional": [],

    # Names of packages required to build this package, but not required to build against it.
    "buildRequired": [],

    # Names of packages optionally setup when building this package, but not used in building against it.
    "buildOptional": [],

    }

def setup(conf, products, build=False):
    """
    Update an SCons environment to make use of the package.

    Arguments:
     conf ------ An SCons Configure context.  The SCons Environment conf.env should be updated
                 by the setup function.
     products -- A dictionary consisting of all dependencies and the return values of calls to their
                 setup() functions, or None if the dependency was optional and was not found.
     build ----- If True, this is the product currently being built, and products in "buildRequired" and
                 "buildOptional" dependencies will also be present in the products dict.
    """
    import distutils.sysconfig
    paths = {
        "CPPPATH": distutils.sysconfig.get_python_inc().split(),
        "LIBPATH": [],
    }
    libs = []
    dir = distutils.sysconfig.get_config_var("LIBPL")
    if not dir in paths["LIBPATH"]:
        paths["LIBPATH"] += [dir]
    pylibrary = distutils.sysconfig.get_config_var("LIBRARY")
    mat = re.search("(python.*)\.(a|so|dylib)$", pylibrary)
    if mat:
        libs.append(mat.group(1))    
    for w in (" ".join([distutils.sysconfig.get_config_var("MODLIBS"),
                        distutils.sysconfig.get_config_var("SHLIBS")])).split():
        mat = re.search(r"^-([Ll])(.*)", w)
        if mat:
            lL = mat.group(1)
            arg = mat.group(2)
            if lL == "l":
                if not arg in libs:
                    libs.append(arg)
            else:
                if os.path.isdir(arg) and not arg in paths["LIBPATH"]:
                    paths["LIBPATH"].append(arg)
    conf.env.PrependUnique(**paths)
    for lib in libs:
        if lib not in conf.env.libs["python"]:
            conf.env.libs["python"].append(lib)
    return {"paths": paths, "libs": {"python": libs}}
